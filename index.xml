<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xyz的博客</title>
    <link>https://yaoyaomeng.github.io/</link>
    <description>Recent content on Xyz的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 25 Mar 2020 14:38:13 +0800</lastBuildDate>
    
	<atom:link href="https://yaoyaomeng.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Stm32学习笔记</title>
      <link>https://yaoyaomeng.github.io/post/stm32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 25 Mar 2020 14:38:13 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/stm32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>GPIO 寄存器版本stm32的目录，在keil根目录添加startup_stm32f40_41xxx.s即可， stm32f4有7组io口，分别GOIOA-GPIOG，每一组io有16个io端口，每个io为一个引脚，在我们用io口必须使能(控制信号的输入输出)对应io口时钟寄存器来控制i</description>
    </item>
    
    <item>
      <title>AndroidSqlite</title>
      <link>https://yaoyaomeng.github.io/post/androidSqlite/</link>
      <pubDate>Thu, 23 Jan 2020 16:48:17 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/androidSqlite/</guid>
      <description>既然要用到数据库那当然也要了解一下安卓的文件存储,首先看文件存储的代码 文件存储 @Override public void onClick(View v) { switch (v.getId()) { case R.id.button: Log.d(TAG, &amp;quot;onClick: 1&amp;quot;); save(&amp;quot;我&amp;quot;); break; case R.id.button2: Log.d(TAG, &amp;quot;onClick: 2&amp;quot;); String inputText = load(); if (!TextUtils.isEmpty(inputText)) { textView.setText(inputText); }else { Toast.makeText(MainActivity.this,&amp;quot;没有读取到文件&amp;quot</description>
    </item>
    
    <item>
      <title>Broadcast</title>
      <link>https://yaoyaomeng.github.io/post/Broadcast/</link>
      <pubDate>Wed, 15 Jan 2020 17:54:08 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/Broadcast/</guid>
      <description>广播可以用来传递信息 public class MainActivity extends AppCompatActivity { private Button button1; private TextView textview1; private MyBroadcast mBroadcast; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); button1 = (Button) findViewById(R.id.button1); textview1 = (TextView) findViewById(R.id.text1); button1.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent intent = new Intent(MainActivity.this,Main2Activity.class); startActivity(intent); } }); mBroadcast = new MyBroadcast(); IntentFilter intentFilter = new IntentFilter(); intentFilter.addAction(&amp;quot;com.skypan.up&amp;quot;); LocalBroadcastManager.getInstance(this).registerReceiver(mBroadcast,intentFilter); } private class MyBroadcast extends BroadcastReceiver{ @Override public void onReceive(Context context, Intent intent) { switch (intent.getAction()){ case &amp;quot;com.skypan.up&amp;quot;: textview1.setText(&amp;quot;abc&amp;quot;); break; } } } @Override protected void onDestroy() { super.onDestroy(); LocalBroadcastManager.getInstance(this).unregisterReceiver(mBroadcast); } } MyBroadcast为要注册的广播继承BroadcastReceiver类，</description>
    </item>
    
    <item>
      <title>Fragment</title>
      <link>https://yaoyaomeng.github.io/post/Fragment/</link>
      <pubDate>Tue, 14 Jan 2020 15:36:55 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/Fragment/</guid>
      <description>fragment我的理解就是有一个小的activity,也可包含布局也有生命周期，可嵌入到activity中 静态添加 在main布局添加fragment标签，这里的android:name=&amp;quot;com.example.xyz.fragmentview.FragmentOne</description>
    </item>
    
    <item>
      <title>Android学习2</title>
      <link>https://yaoyaomeng.github.io/post/android%E5%AD%A6%E4%B9%A02/</link>
      <pubDate>Sat, 28 Dec 2019 12:53:25 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/android%E5%AD%A6%E4%B9%A02/</guid>
      <description>ListView ListView是安卓之前常用的列表View组件，现在用的最多RecylerView不过还是要了解个大概， 代码如下 package com.example.xyz.baseadapterlearn; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.widget.ListView; import android.widget.SimpleAdapter; import java.util.ArrayList; import java.util.HashMap; import java.util.List; public class test1Activity extends AppCompatActivity { public List&amp;lt;HashMap&amp;lt;String,String&amp;gt;&amp;gt; data; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_test1); mmmset(); SimpleAdapter simpleAdapter = new SimpleAdapter(test1Activity.this,data,android.R.layout.simple_list_item_2,new String[] {&amp;quot;text1&amp;quot;,&amp;quot;text2&amp;quot;}, new int[] {android.R.id.text1,android.R.id.text2}); ListView listView = findViewById(R.id.listview_1); listView.setAdapter(simpleAdapter); } public void mmmset(){ data = new ArrayList&amp;lt;&amp;gt;(); for(int i = 0;i&amp;lt;15;i++){ HashMap&amp;lt;String,String&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); map.put(&amp;quot;te</description>
    </item>
    
    <item>
      <title>Android学习1</title>
      <link>https://yaoyaomeng.github.io/post/android%E5%AD%A6%E4%B9%A01/</link>
      <pubDate>Sun, 22 Dec 2019 21:17:26 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/android%E5%AD%A6%E4%B9%A01/</guid>
      <description>开发环境的使用的Android Studio 3.2,安装起来也是一波三折还好都搞定了。 初始代码 package com.example.xyz.testapp; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //调用父类方法 setContentView(R.layout.activity_main); //加载布局 } } 这是默认的布局这里setContentView加载了一个xml文件，这里的xml需要在AndroidManifest.xml中</description>
    </item>
    
    <item>
      <title>STC51学习归纳</title>
      <link>https://yaoyaomeng.github.io/post/STC51%E5%AD%A6%E4%B9%A0%E5%BD%92%E7%BA%B3/</link>
      <pubDate>Sun, 08 Dec 2019 11:24:18 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/STC51%E5%AD%A6%E4%B9%A0%E5%BD%92%E7%BA%B3/</guid>
      <description>单片机原理图 控制led #include &amp;lt;reg52.h&amp;gt; unsigned int a; sbit LED1 = P2^0; //sbit定义特殊功能寄存器的位变量，这里是定义P2的0位也就是控制led的第一个灯 sbit LED2 = P2^1; sbit LED3 = P2^2; sbit LED4 = P2^3; void main(){ a = 3000; while(1){ LED1 = 0; //这里是给低电平亮 while(a--); //进行延迟，如果不写会让led一直亮，因为电平来的太快了 LED1 = 1; while(a--); LED2 = 0; while(a--); LED2 = 1; while(a--); LED3 = 0; while(a--);</description>
    </item>
    
    <item>
      <title>C语言指针</title>
      <link>https://yaoyaomeng.github.io/post/c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/</link>
      <pubDate>Sat, 07 Dec 2019 15:02:35 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/</guid>
      <description>指针 指针的作用可以通过内存地址来控制变量,定义指针时*p = &amp;amp;变量名，指针会在计算机内存分配4个字节存放这个变量的首地址，*p叫指针变量 指针的用法 #include &amp;lt;stdio.h&amp;gt; int main(){ int a = 20; int *p; p = &amp;amp;a; *p = 25; printf(&amp;quot;%d \n&amp;quot;,a); return 0; } 此时输出为25 把*p可以当作a进行赋值操作; 在数组中的用法： #include &amp;lt;stdio.h&amp;gt; void selectArrayMax1(); int a[] = {1,2,3,4,5,9}; int main(){ selectArrayMax1(&amp;amp;a); return 0;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://yaoyaomeng.github.io/post/helloWorld/</link>
      <pubDate>Sat, 07 Dec 2019 11:02:12 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/helloWorld/</guid>
      <description>博客采用hugo+github搭建而成. 主题为maupassant； 本博客主要记录学习笔记和一些自己的心得体会。</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://yaoyaomeng.github.io/tools/</link>
      <pubDate>Sat, 07 Dec 2019 10:57:37 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/tools/</guid>
      <description>工具列表 还没有添加</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://yaoyaomeng.github.io/about/</link>
      <pubDate>Sat, 07 Dec 2019 10:05:01 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/about/</guid>
      <description>简介 带专生(嵌入式技术与应用.在读) emai: adiminxyz@qq.com github: https://github.com/yaoyaomeng</description>
    </item>
    
    <item>
      <title>Sqlinject</title>
      <link>https://yaoyaomeng.github.io/post/sqlinject/</link>
      <pubDate>Fri, 09 Aug 2019 01:46:49 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/sqlinject/</guid>
      <description>普通注入 header(&amp;#39;content-type: text/html; charset=utf-8&amp;#39;); $id = $_GET[&amp;#39;id&amp;#39;]; $conn = mysqli_connect(&amp;#39;localhost&amp;#39;,&amp;#34;root&amp;#34;,&amp;#39;root&amp;#39;,&amp;#39;test&amp;#39;); $sql = &amp;#34;select * from user where id={$id}&amp;#34;; $result = $conn-&amp;gt;query($sql); if($conn-&amp;gt;connect_error) { die(&amp;#39;数据库连接失败：&amp;#39; . $conn-&amp;gt;connect_error); } var_dump(&amp;#39;当前SQL语句是：&amp;#39; . $sql . &amp;#34;&amp;lt;br /&amp;gt;&amp;#34;); @print_r(mysqli_fetch_row($result)); 宽字节注入 gbk编码会把两个字节合并为一个汉字,因为汉字是个多字节组成，从而把用来过滤的\合并，造成了sql语</description>
    </item>
    
    <item>
      <title>Bypass Wts Waf</title>
      <link>https://yaoyaomeng.github.io/post/bypass-wts-waf/</link>
      <pubDate>Mon, 22 Jul 2019 22:02:39 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/bypass-wts-waf/</guid>
      <description>今天遇到个站有点意思，环境asp.net，waf是wts—waf,有个链接存在sql注入 过waf注入的整个过程非常顺利，以下是过程 ?id=6532+and+1=1 //用+号是为了绕过waf ?id=6532+and+1=2 网页出现异常说明存在注入。 然后ORDER BY 25 查询字段,超过25出现异常说明字段数为25 +union+select+1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25+from+admin 使用联合查询猜表名，从网页返回的</description>
    </item>
    
    <item>
      <title>代码执行于命令执行</title>
      <link>https://yaoyaomeng.github.io/post/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%BA%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Sat, 06 Jul 2019 03:14:28 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%BA%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</guid>
      <description>代码执行 php中有eval()这个函数, 把字符串按照 PHP 代码来计算。 该字符串必须是合法的 PHP 代码,且必须以分号结尾. 意思就是说把里面的字符串按照php代码来执行。 $a = &#39;aaa&#39;; $b = &#39;bbb&#39;; eval(&#39;$a=$b;&#39;); var_dump($a); 类似的还有assert(),preg_replace(),call_user_func(),call_us</description>
    </item>
    
    <item>
      <title>xss-学习姿势</title>
      <link>https://yaoyaomeng.github.io/post/xss-%E5%AD%A6%E4%B9%A0%E5%A7%BF%E5%8A%BF/</link>
      <pubDate>Thu, 04 Jul 2019 12:43:31 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/xss-%E5%AD%A6%E4%B9%A0%E5%A7%BF%E5%8A%BF/</guid>
      <description>xss也叫跨站脚本攻击，原因在于网站的前端因为对输入或者输出不严谨从而可以在网站插入脚本代码造成xss攻击。 &amp;lt;The rest of contents | 余下全文&amp;gt; xss形成分类 主要是分为反射型和存储型还有dom型 反射型 这里的提交参数没有进行过滤转义，导致输出处可直接执行脚本代码 &amp;lt;form action = &amp;quot;htmlzr.&amp;quot; method = &amp;quot;get&amp;quot;&amp;gt; name:&amp;lt;input type = &amp;quot;text&amp;quot; name = &amp;quot;htmlname&amp;quot;&amp;gt; &amp;lt;input</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://yaoyaomeng.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yaoyaomeng.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://yaoyaomeng.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yaoyaomeng.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>