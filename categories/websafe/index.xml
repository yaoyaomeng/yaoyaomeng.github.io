<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>websafe on Xyz的博客</title>
    <link>https://yaoyaomeng.github.io/categories/websafe/</link>
    <description>Recent content in websafe on Xyz的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 09 Aug 2019 01:46:49 +0800</lastBuildDate>
    
	<atom:link href="https://yaoyaomeng.github.io/categories/websafe/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sqlinject</title>
      <link>https://yaoyaomeng.github.io/post/sqlinject/</link>
      <pubDate>Fri, 09 Aug 2019 01:46:49 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/sqlinject/</guid>
      <description>普通注入 header(&amp;#39;content-type: text/html; charset=utf-8&amp;#39;); $id = $_GET[&amp;#39;id&amp;#39;]; $conn = mysqli_connect(&amp;#39;localhost&amp;#39;,&amp;#34;root&amp;#34;,&amp;#39;root&amp;#39;,&amp;#39;test&amp;#39;); $sql = &amp;#34;select * from user where id={$id}&amp;#34;; $result = $conn-&amp;gt;query($sql); if($conn-&amp;gt;connect_error) { die(&amp;#39;数据库连接失败：&amp;#39; . $conn-&amp;gt;connect_error); } var_dump(&amp;#39;当前SQL语句是：&amp;#39; . $sql . &amp;#34;&amp;lt;br /&amp;gt;&amp;#34;); @print_r(mysqli_fetch_row($result)); 宽字节注入 gbk编码会把两个字节合并为一个汉字,因为汉字是个多字节组成，从而把用来过滤的\合并，造成了sql语</description>
    </item>
    
    <item>
      <title>Bypass Wts Waf</title>
      <link>https://yaoyaomeng.github.io/post/bypass-wts-waf/</link>
      <pubDate>Mon, 22 Jul 2019 22:02:39 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/bypass-wts-waf/</guid>
      <description>今天遇到个站有点意思，环境asp.net，waf是wts—waf,有个链接存在sql注入 过waf注入的整个过程非常顺利，以下是过程 ?id=6532+and+1=1 //用+号是为了绕过waf ?id=6532+and+1=2 网页出现异常说明存在注入。 然后ORDER BY 25 查询字段,超过25出现异常说明字段数为25 +union+select+1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25+from+admin 使用联合查询猜表名，从网页返回的</description>
    </item>
    
    <item>
      <title>代码执行于命令执行</title>
      <link>https://yaoyaomeng.github.io/post/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%BA%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Sat, 06 Jul 2019 03:14:28 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%BA%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</guid>
      <description>代码执行 php中有eval()这个函数, 把字符串按照 PHP 代码来计算。 该字符串必须是合法的 PHP 代码,且必须以分号结尾. 意思就是说把里面的字符串按照php代码来执行。 $a = &#39;aaa&#39;; $b = &#39;bbb&#39;; eval(&#39;$a=$b;&#39;); var_dump($a); 类似的还有assert(),preg_replace(),call_user_func(),call_us</description>
    </item>
    
    <item>
      <title>xss-学习姿势</title>
      <link>https://yaoyaomeng.github.io/post/xss-%E5%AD%A6%E4%B9%A0%E5%A7%BF%E5%8A%BF/</link>
      <pubDate>Thu, 04 Jul 2019 12:43:31 +0800</pubDate>
      
      <guid>https://yaoyaomeng.github.io/post/xss-%E5%AD%A6%E4%B9%A0%E5%A7%BF%E5%8A%BF/</guid>
      <description>xss也叫跨站脚本攻击，原因在于网站的前端因为对输入或者输出不严谨从而可以在网站插入脚本代码造成xss攻击。 &amp;lt;The rest of contents | 余下全文&amp;gt; xss形成分类 主要是分为反射型和存储型还有dom型 反射型 这里的提交参数没有进行过滤转义，导致输出处可直接执行脚本代码 &amp;lt;form action = &amp;quot;htmlzr.&amp;quot; method = &amp;quot;get&amp;quot;&amp;gt; name:&amp;lt;input type = &amp;quot;text&amp;quot; name = &amp;quot;htmlname&amp;quot;&amp;gt; &amp;lt;input</description>
    </item>
    
  </channel>
</rss>